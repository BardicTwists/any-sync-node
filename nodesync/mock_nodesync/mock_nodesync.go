// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-node/nodesync (interfaces: NodeSync)
//
// Generated by this command:
//
//	mockgen -destination mock_nodesync/mock_nodesync.go github.com/anyproto/any-sync-node/nodesync NodeSync
//
// Package mock_nodesync is a generated GoMock package.
package mock_nodesync

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeSync is a mock of NodeSync interface.
type MockNodeSync struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSyncMockRecorder
}

// MockNodeSyncMockRecorder is the mock recorder for MockNodeSync.
type MockNodeSyncMockRecorder struct {
	mock *MockNodeSync
}

// NewMockNodeSync creates a new mock instance.
func NewMockNodeSync(ctrl *gomock.Controller) *MockNodeSync {
	mock := &MockNodeSync{ctrl: ctrl}
	mock.recorder = &MockNodeSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSync) EXPECT() *MockNodeSyncMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNodeSync) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNodeSyncMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNodeSync)(nil).Close), arg0)
}

// Init mocks base method.
func (m *MockNodeSync) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockNodeSyncMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockNodeSync)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockNodeSync) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNodeSyncMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNodeSync)(nil).Name))
}

// Run mocks base method.
func (m *MockNodeSync) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockNodeSyncMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNodeSync)(nil).Run), arg0)
}

// Sync mocks base method.
func (m *MockNodeSync) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockNodeSyncMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockNodeSync)(nil).Sync))
}

// WaitSyncOnStart mocks base method.
func (m *MockNodeSync) WaitSyncOnStart() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitSyncOnStart")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// WaitSyncOnStart indicates an expected call of WaitSyncOnStart.
func (mr *MockNodeSyncMockRecorder) WaitSyncOnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitSyncOnStart", reflect.TypeOf((*MockNodeSync)(nil).WaitSyncOnStart))
}
