syntax = "proto3";
package anyNodeSync;

option go_package = "nodesync/nodesyncproto";

enum ErrCodes {
    Unexpected = 0;
    ExpectedCoordinator = 1;
    UnsupportedStorage = 2;
    ErrorOffset = 1000;
}

service NodeSync {
    // PartitionSync compares all spaces by given c-hash partition
    rpc PartitionSync(PartitionSyncRequest) returns (PartitionSyncResponse);
    // ColdSync requests cold sync stream for fast space download
    rpc ColdSync(ColdSyncRequest) returns (stream ColdSyncResponse);
}

// PartitionSyncRange presenting a request for one range
message PartitionSyncRange {
    uint64 from = 1;
    uint64 to = 2;
    uint32 limit = 3;
    bool elements = 4;
}

// PartitionSyncResult presenting a response for one range
message PartitionSyncResult {
    bytes hash = 1;
    repeated PartitionSyncResultElement elements = 2;
    uint32 count = 3;
}

// PartitionSyncResultElement presenting state of one object
message PartitionSyncResultElement {
    string id = 1;
    string head = 2;
}

// HeadSyncRequest is a request for HeadSync
message PartitionSyncRequest {
    uint64 partitionId = 1;
    repeated PartitionSyncRange ranges = 2;
}

// PartitionSyncResponse is a response for HeadSync
message PartitionSyncResponse {
    repeated PartitionSyncResult results = 1;
}

message ColdSyncRequest {
    string spaceId = 1;
    ColdSyncProtocolType protocolType = 2;
}

message ColdSyncResponse {
    string filename = 2;
    bytes data = 3;
    uint32 crc32 = 4;
    ColdSyncProtocolType protocolType = 5;
}

enum ColdSyncProtocolType {
    Pogreb = 0;
    AnystoreSqlite = 1;
}