syntax = "proto3";
package anyNodeSync;

option go_package = "nodesync/nodesyncproto";

service NodeSync {
    // PartitionSync compares all spaces by given c-hash partition
    rpc PartitionSync(PartitionSyncRequest) returns (PartitionSyncResponse);
}

// PartitionSyncRange presenting a request for one range
message PartitionSyncRange {
    uint64 partitionId = 1;
    uint64 from = 2;
    uint64 to = 3;
    uint32 limit = 4;
}

// PartitionSyncResult presenting a response for one range
message PartitionSyncResult {
    bytes hash = 1;
    repeated PartitionSyncResultElement elements = 2;
    uint32 count = 3;
}

// PartitionSyncResultElement presenting state of one object
message PartitionSyncResultElement {
    string id = 1;
    string head = 2;
}

// HeadSyncRequest is a request for HeadSync
message PartitionSyncRequest {
    string spaceId = 1;
    repeated PartitionSyncRange ranges = 2;
}

// PartitionSyncResponse is a response for HeadSync
message PartitionSyncResponse {
    repeated PartitionSyncResult results = 1;
}
