// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: nodesync/nodesyncproto/protos/nodesync.proto

package nodesyncproto

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto struct{}

func (drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCNodeSyncClient interface {
	DRPCConn() drpc.Conn

	PartitionSync(ctx context.Context, in *PartitionSyncRequest) (*PartitionSyncResponse, error)
}

type drpcNodeSyncClient struct {
	cc drpc.Conn
}

func NewDRPCNodeSyncClient(cc drpc.Conn) DRPCNodeSyncClient {
	return &drpcNodeSyncClient{cc}
}

func (c *drpcNodeSyncClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcNodeSyncClient) PartitionSync(ctx context.Context, in *PartitionSyncRequest) (*PartitionSyncResponse, error) {
	out := new(PartitionSyncResponse)
	err := c.cc.Invoke(ctx, "/anyNodeSync.NodeSync/PartitionSync", drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCNodeSyncServer interface {
	PartitionSync(context.Context, *PartitionSyncRequest) (*PartitionSyncResponse, error)
}

type DRPCNodeSyncUnimplementedServer struct{}

func (s *DRPCNodeSyncUnimplementedServer) PartitionSync(context.Context, *PartitionSyncRequest) (*PartitionSyncResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCNodeSyncDescription struct{}

func (DRPCNodeSyncDescription) NumMethods() int { return 1 }

func (DRPCNodeSyncDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/anyNodeSync.NodeSync/PartitionSync", drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCNodeSyncServer).
					PartitionSync(
						ctx,
						in1.(*PartitionSyncRequest),
					)
			}, DRPCNodeSyncServer.PartitionSync, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterNodeSync(mux drpc.Mux, impl DRPCNodeSyncServer) error {
	return mux.Register(impl, DRPCNodeSyncDescription{})
}

type DRPCNodeSync_PartitionSyncStream interface {
	drpc.Stream
	SendAndClose(*PartitionSyncResponse) error
}

type drpcNodeSync_PartitionSyncStream struct {
	drpc.Stream
}

func (x *drpcNodeSync_PartitionSyncStream) SendAndClose(m *PartitionSyncResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_nodesync_nodesyncproto_protos_nodesync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
