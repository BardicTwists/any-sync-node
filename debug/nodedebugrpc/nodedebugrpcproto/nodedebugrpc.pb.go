// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug/nodedebugrpc/nodedebugrpcproto/protos/nodedebugrpc.proto

package nodedebugrpcproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DumpTreeRequest struct {
	SpaceId    string `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=documentId,proto3" json:"documentId,omitempty"`
}

func (m *DumpTreeRequest) Reset()         { *m = DumpTreeRequest{} }
func (m *DumpTreeRequest) String() string { return proto.CompactTextString(m) }
func (*DumpTreeRequest) ProtoMessage()    {}
func (*DumpTreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{0}
}
func (m *DumpTreeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DumpTreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DumpTreeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DumpTreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpTreeRequest.Merge(m, src)
}
func (m *DumpTreeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DumpTreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpTreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DumpTreeRequest proto.InternalMessageInfo

func (m *DumpTreeRequest) GetSpaceId() string {
	if m != nil {
		return m.SpaceId
	}
	return ""
}

func (m *DumpTreeRequest) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

type DumpTreeResponse struct {
	Dump string `protobuf:"bytes,1,opt,name=dump,proto3" json:"dump,omitempty"`
}

func (m *DumpTreeResponse) Reset()         { *m = DumpTreeResponse{} }
func (m *DumpTreeResponse) String() string { return proto.CompactTextString(m) }
func (*DumpTreeResponse) ProtoMessage()    {}
func (*DumpTreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{1}
}
func (m *DumpTreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DumpTreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DumpTreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DumpTreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpTreeResponse.Merge(m, src)
}
func (m *DumpTreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DumpTreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpTreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DumpTreeResponse proto.InternalMessageInfo

func (m *DumpTreeResponse) GetDump() string {
	if m != nil {
		return m.Dump
	}
	return ""
}

type AllTreesRequest struct {
	SpaceId string `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
}

func (m *AllTreesRequest) Reset()         { *m = AllTreesRequest{} }
func (m *AllTreesRequest) String() string { return proto.CompactTextString(m) }
func (*AllTreesRequest) ProtoMessage()    {}
func (*AllTreesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{2}
}
func (m *AllTreesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTreesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllTreesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllTreesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTreesRequest.Merge(m, src)
}
func (m *AllTreesRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllTreesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTreesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllTreesRequest proto.InternalMessageInfo

func (m *AllTreesRequest) GetSpaceId() string {
	if m != nil {
		return m.SpaceId
	}
	return ""
}

type Tree struct {
	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Heads []string `protobuf:"bytes,2,rep,name=heads,proto3" json:"heads,omitempty"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}
func (*Tree) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{3}
}
func (m *Tree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tree.Merge(m, src)
}
func (m *Tree) XXX_Size() int {
	return m.Size()
}
func (m *Tree) XXX_DiscardUnknown() {
	xxx_messageInfo_Tree.DiscardUnknown(m)
}

var xxx_messageInfo_Tree proto.InternalMessageInfo

func (m *Tree) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tree) GetHeads() []string {
	if m != nil {
		return m.Heads
	}
	return nil
}

type AllTreesResponse struct {
	Trees []*Tree `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
}

func (m *AllTreesResponse) Reset()         { *m = AllTreesResponse{} }
func (m *AllTreesResponse) String() string { return proto.CompactTextString(m) }
func (*AllTreesResponse) ProtoMessage()    {}
func (*AllTreesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{4}
}
func (m *AllTreesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllTreesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllTreesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllTreesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllTreesResponse.Merge(m, src)
}
func (m *AllTreesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllTreesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllTreesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllTreesResponse proto.InternalMessageInfo

func (m *AllTreesResponse) GetTrees() []*Tree {
	if m != nil {
		return m.Trees
	}
	return nil
}

type AllSpacesRequest struct {
}

func (m *AllSpacesRequest) Reset()         { *m = AllSpacesRequest{} }
func (m *AllSpacesRequest) String() string { return proto.CompactTextString(m) }
func (*AllSpacesRequest) ProtoMessage()    {}
func (*AllSpacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{5}
}
func (m *AllSpacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllSpacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllSpacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllSpacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllSpacesRequest.Merge(m, src)
}
func (m *AllSpacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllSpacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllSpacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllSpacesRequest proto.InternalMessageInfo

type AllSpacesResponse struct {
	SpaceIds []string `protobuf:"bytes,1,rep,name=spaceIds,proto3" json:"spaceIds,omitempty"`
}

func (m *AllSpacesResponse) Reset()         { *m = AllSpacesResponse{} }
func (m *AllSpacesResponse) String() string { return proto.CompactTextString(m) }
func (*AllSpacesResponse) ProtoMessage()    {}
func (*AllSpacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{6}
}
func (m *AllSpacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllSpacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllSpacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllSpacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllSpacesResponse.Merge(m, src)
}
func (m *AllSpacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllSpacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllSpacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllSpacesResponse proto.InternalMessageInfo

func (m *AllSpacesResponse) GetSpaceIds() []string {
	if m != nil {
		return m.SpaceIds
	}
	return nil
}

type TreeParamsRequest struct {
	SpaceId    string `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	DocumentId string `protobuf:"bytes,2,opt,name=documentId,proto3" json:"documentId,omitempty"`
}

func (m *TreeParamsRequest) Reset()         { *m = TreeParamsRequest{} }
func (m *TreeParamsRequest) String() string { return proto.CompactTextString(m) }
func (*TreeParamsRequest) ProtoMessage()    {}
func (*TreeParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{7}
}
func (m *TreeParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeParamsRequest.Merge(m, src)
}
func (m *TreeParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TreeParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TreeParamsRequest proto.InternalMessageInfo

func (m *TreeParamsRequest) GetSpaceId() string {
	if m != nil {
		return m.SpaceId
	}
	return ""
}

func (m *TreeParamsRequest) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

type TreeParamsResponse struct {
	RootId  string   `protobuf:"bytes,1,opt,name=rootId,proto3" json:"rootId,omitempty"`
	HeadIds []string `protobuf:"bytes,2,rep,name=headIds,proto3" json:"headIds,omitempty"`
}

func (m *TreeParamsResponse) Reset()         { *m = TreeParamsResponse{} }
func (m *TreeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*TreeParamsResponse) ProtoMessage()    {}
func (*TreeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{8}
}
func (m *TreeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeParamsResponse.Merge(m, src)
}
func (m *TreeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TreeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TreeParamsResponse proto.InternalMessageInfo

func (m *TreeParamsResponse) GetRootId() string {
	if m != nil {
		return m.RootId
	}
	return ""
}

func (m *TreeParamsResponse) GetHeadIds() []string {
	if m != nil {
		return m.HeadIds
	}
	return nil
}

type ForceNodeSyncRequest struct {
}

func (m *ForceNodeSyncRequest) Reset()         { *m = ForceNodeSyncRequest{} }
func (m *ForceNodeSyncRequest) String() string { return proto.CompactTextString(m) }
func (*ForceNodeSyncRequest) ProtoMessage()    {}
func (*ForceNodeSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{9}
}
func (m *ForceNodeSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceNodeSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceNodeSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceNodeSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceNodeSyncRequest.Merge(m, src)
}
func (m *ForceNodeSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForceNodeSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceNodeSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForceNodeSyncRequest proto.InternalMessageInfo

type ForceNodeSyncResponse struct {
}

func (m *ForceNodeSyncResponse) Reset()         { *m = ForceNodeSyncResponse{} }
func (m *ForceNodeSyncResponse) String() string { return proto.CompactTextString(m) }
func (*ForceNodeSyncResponse) ProtoMessage()    {}
func (*ForceNodeSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{10}
}
func (m *ForceNodeSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceNodeSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceNodeSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceNodeSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceNodeSyncResponse.Merge(m, src)
}
func (m *ForceNodeSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForceNodeSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceNodeSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForceNodeSyncResponse proto.InternalMessageInfo

type NodesAddressesBySpaceRequest struct {
	SpaceId string `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
}

func (m *NodesAddressesBySpaceRequest) Reset()         { *m = NodesAddressesBySpaceRequest{} }
func (m *NodesAddressesBySpaceRequest) String() string { return proto.CompactTextString(m) }
func (*NodesAddressesBySpaceRequest) ProtoMessage()    {}
func (*NodesAddressesBySpaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{11}
}
func (m *NodesAddressesBySpaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesAddressesBySpaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodesAddressesBySpaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodesAddressesBySpaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesAddressesBySpaceRequest.Merge(m, src)
}
func (m *NodesAddressesBySpaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *NodesAddressesBySpaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesAddressesBySpaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodesAddressesBySpaceRequest proto.InternalMessageInfo

func (m *NodesAddressesBySpaceRequest) GetSpaceId() string {
	if m != nil {
		return m.SpaceId
	}
	return ""
}

type NodesAddressesBySpaceResponse struct {
	NodeAddresses []string `protobuf:"bytes,1,rep,name=nodeAddresses,proto3" json:"nodeAddresses,omitempty"`
}

func (m *NodesAddressesBySpaceResponse) Reset()         { *m = NodesAddressesBySpaceResponse{} }
func (m *NodesAddressesBySpaceResponse) String() string { return proto.CompactTextString(m) }
func (*NodesAddressesBySpaceResponse) ProtoMessage()    {}
func (*NodesAddressesBySpaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_783a24b01ebd5381, []int{12}
}
func (m *NodesAddressesBySpaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesAddressesBySpaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodesAddressesBySpaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodesAddressesBySpaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesAddressesBySpaceResponse.Merge(m, src)
}
func (m *NodesAddressesBySpaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *NodesAddressesBySpaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesAddressesBySpaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodesAddressesBySpaceResponse proto.InternalMessageInfo

func (m *NodesAddressesBySpaceResponse) GetNodeAddresses() []string {
	if m != nil {
		return m.NodeAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*DumpTreeRequest)(nil), "nodeapi.DumpTreeRequest")
	proto.RegisterType((*DumpTreeResponse)(nil), "nodeapi.DumpTreeResponse")
	proto.RegisterType((*AllTreesRequest)(nil), "nodeapi.AllTreesRequest")
	proto.RegisterType((*Tree)(nil), "nodeapi.Tree")
	proto.RegisterType((*AllTreesResponse)(nil), "nodeapi.AllTreesResponse")
	proto.RegisterType((*AllSpacesRequest)(nil), "nodeapi.AllSpacesRequest")
	proto.RegisterType((*AllSpacesResponse)(nil), "nodeapi.AllSpacesResponse")
	proto.RegisterType((*TreeParamsRequest)(nil), "nodeapi.TreeParamsRequest")
	proto.RegisterType((*TreeParamsResponse)(nil), "nodeapi.TreeParamsResponse")
	proto.RegisterType((*ForceNodeSyncRequest)(nil), "nodeapi.ForceNodeSyncRequest")
	proto.RegisterType((*ForceNodeSyncResponse)(nil), "nodeapi.ForceNodeSyncResponse")
	proto.RegisterType((*NodesAddressesBySpaceRequest)(nil), "nodeapi.NodesAddressesBySpaceRequest")
	proto.RegisterType((*NodesAddressesBySpaceResponse)(nil), "nodeapi.NodesAddressesBySpaceResponse")
}

func init() {
	proto.RegisterFile("debug/nodedebugrpc/nodedebugrpcproto/protos/nodedebugrpc.proto", fileDescriptor_783a24b01ebd5381)
}

var fileDescriptor_783a24b01ebd5381 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xcd, 0x26, 0x6d, 0x93, 0x0c, 0x0a, 0x6d, 0xad, 0xb6, 0x2c, 0x0b, 0xb5, 0x22, 0x53, 0xaa,
	0x48, 0xa0, 0x44, 0x2a, 0x07, 0x38, 0xb5, 0x4a, 0x44, 0x2b, 0x45, 0x88, 0x0a, 0xa5, 0x9c, 0xb8,
	0x6d, 0xd7, 0x06, 0x22, 0x35, 0xb1, 0x59, 0xef, 0x1e, 0xfa, 0x17, 0x7c, 0x16, 0x27, 0xd4, 0x23,
	0x47, 0x94, 0xfc, 0x08, 0xb2, 0xd7, 0xeb, 0xac, 0xc3, 0x86, 0x20, 0xf5, 0x92, 0x78, 0xe6, 0x8d,
	0xdf, 0x3c, 0xcf, 0x3c, 0x2d, 0x9c, 0x52, 0x76, 0x9d, 0x7e, 0xe9, 0x4d, 0x39, 0x65, 0xfa, 0x14,
	0x8b, 0xc8, 0x09, 0x44, 0xcc, 0x13, 0xde, 0xd3, 0xbf, 0xd2, 0x01, 0xba, 0x3a, 0x87, 0xea, 0x2a,
	0x17, 0x8a, 0x31, 0x79, 0x07, 0xdb, 0x6f, 0xd3, 0x89, 0xf8, 0x18, 0x33, 0x36, 0x62, 0xdf, 0x52,
	0x26, 0x13, 0xe4, 0x43, 0x5d, 0x8a, 0x30, 0x62, 0x43, 0xea, 0x7b, 0x6d, 0xaf, 0xd3, 0x1c, 0xe5,
	0x21, 0xc2, 0x00, 0x94, 0x47, 0xe9, 0x84, 0x4d, 0x93, 0x21, 0xf5, 0xab, 0x1a, 0x2c, 0x64, 0xc8,
	0x31, 0xec, 0x2c, 0xc8, 0xa4, 0xe0, 0x53, 0xc9, 0x10, 0x82, 0x0d, 0x9a, 0x4e, 0x84, 0xa1, 0xd2,
	0x67, 0xf2, 0x02, 0xb6, 0xfb, 0x37, 0x37, 0xaa, 0x4c, 0xae, 0x6d, 0x4a, 0x5e, 0xc2, 0x86, 0xaa,
	0x44, 0x0f, 0xa1, 0x3a, 0xce, 0xc1, 0xea, 0x98, 0xa2, 0x3d, 0xd8, 0xfc, 0xca, 0x42, 0x2a, 0xfd,
	0x6a, 0xbb, 0xd6, 0x69, 0x8e, 0xb2, 0x80, 0xbc, 0x86, 0x9d, 0x05, 0xb5, 0x91, 0xf0, 0x0c, 0x36,
	0x13, 0x95, 0xf0, 0xbd, 0x76, 0xad, 0xf3, 0xe0, 0xa4, 0xd5, 0x35, 0x8f, 0xef, 0x6a, 0xa1, 0x19,
	0x46, 0x90, 0xbe, 0x78, 0xa5, 0x9a, 0xe6, 0xa2, 0x48, 0x0f, 0x76, 0x0b, 0x39, 0xc3, 0x16, 0x40,
	0xc3, 0x48, 0xcb, 0x08, 0x9b, 0x23, 0x1b, 0x93, 0xf7, 0xb0, 0xab, 0x38, 0x3f, 0x84, 0x71, 0x38,
	0x91, 0xf7, 0x9f, 0xe7, 0x05, 0xa0, 0x22, 0x9d, 0x11, 0x70, 0x00, 0x5b, 0x31, 0xe7, 0x89, 0xa5,
	0x33, 0x91, 0xea, 0xa3, 0x66, 0x30, 0xb4, 0x23, 0xc9, 0x43, 0x72, 0x00, 0x7b, 0x17, 0x3c, 0x8e,
	0xd8, 0x25, 0xa7, 0xec, 0xea, 0x76, 0x1a, 0xe5, 0xef, 0x7b, 0x04, 0xfb, 0x4b, 0xf9, 0xac, 0x05,
	0x79, 0x03, 0x4f, 0x55, 0x4e, 0xf6, 0x29, 0x8d, 0x99, 0x94, 0x4c, 0x0e, 0x6e, 0xf5, 0x14, 0xd6,
	0x6f, 0xeb, 0x1c, 0x0e, 0x57, 0xdc, 0x34, 0xea, 0x8f, 0xa0, 0xa5, 0xc6, 0x6f, 0x71, 0x33, 0x43,
	0x37, 0x79, 0xf2, 0xb3, 0x06, 0x75, 0xc5, 0xd3, 0x17, 0x63, 0x74, 0x06, 0x8d, 0xdc, 0x55, 0xc8,
	0xb7, 0xbb, 0x5b, 0x72, 0x6d, 0xf0, 0xb8, 0x04, 0x31, 0x2d, 0xcf, 0x01, 0x16, 0x63, 0x44, 0x81,
	0xb3, 0x7e, 0x67, 0x55, 0xc1, 0x93, 0x52, 0xcc, 0xd0, 0x9c, 0x41, 0x23, 0xb7, 0x56, 0x41, 0xc7,
	0x92, 0x91, 0x0b, 0x3a, 0xfe, 0xf2, 0xe1, 0x00, 0x9a, 0xd6, 0x4e, 0xc8, 0xa9, 0x73, 0x6c, 0x17,
	0x04, 0x65, 0x90, 0xe1, 0xb8, 0x84, 0x96, 0xb3, 0x32, 0x74, 0x68, 0x8b, 0xcb, 0x56, 0x1c, 0xe0,
	0x55, 0xb0, 0xe1, 0xfb, 0x0c, 0xfb, 0xa5, 0xfb, 0x42, 0xcf, 0xed, 0xc5, 0x7f, 0x39, 0x21, 0x38,
	0x5e, 0x57, 0x96, 0xf5, 0x19, 0x9c, 0xfe, 0x98, 0x61, 0xef, 0x6e, 0x86, 0xbd, 0xdf, 0x33, 0xec,
	0x7d, 0x9f, 0xe3, 0xca, 0xdd, 0x1c, 0x57, 0x7e, 0xcd, 0x71, 0xe5, 0xd3, 0xd1, 0xff, 0x7c, 0xca,
	0xae, 0xb7, 0xf4, 0xdf, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xc4, 0xfe, 0x8a, 0xf9,
	0x04, 0x00, 0x00,
}

func (m *DumpTreeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DumpTreeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DumpTreeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DocumentId) > 0 {
		i -= len(m.DocumentId)
		copy(dAtA[i:], m.DocumentId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.DocumentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpaceId) > 0 {
		i -= len(m.SpaceId)
		copy(dAtA[i:], m.SpaceId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.SpaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DumpTreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DumpTreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DumpTreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dump) > 0 {
		i -= len(m.Dump)
		copy(dAtA[i:], m.Dump)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.Dump)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllTreesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllTreesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllTreesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpaceId) > 0 {
		i -= len(m.SpaceId)
		copy(dAtA[i:], m.SpaceId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.SpaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Heads) > 0 {
		for iNdEx := len(m.Heads) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Heads[iNdEx])
			copy(dAtA[i:], m.Heads[iNdEx])
			i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.Heads[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllTreesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllTreesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllTreesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trees) > 0 {
		for iNdEx := len(m.Trees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodedebugrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllSpacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllSpacesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllSpacesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllSpacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllSpacesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllSpacesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpaceIds) > 0 {
		for iNdEx := len(m.SpaceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpaceIds[iNdEx])
			copy(dAtA[i:], m.SpaceIds[iNdEx])
			i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.SpaceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TreeParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DocumentId) > 0 {
		i -= len(m.DocumentId)
		copy(dAtA[i:], m.DocumentId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.DocumentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpaceId) > 0 {
		i -= len(m.SpaceId)
		copy(dAtA[i:], m.SpaceId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.SpaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TreeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeadIds) > 0 {
		for iNdEx := len(m.HeadIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HeadIds[iNdEx])
			copy(dAtA[i:], m.HeadIds[iNdEx])
			i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.HeadIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RootId) > 0 {
		i -= len(m.RootId)
		copy(dAtA[i:], m.RootId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.RootId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForceNodeSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceNodeSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceNodeSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ForceNodeSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceNodeSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceNodeSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NodesAddressesBySpaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesAddressesBySpaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesAddressesBySpaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpaceId) > 0 {
		i -= len(m.SpaceId)
		copy(dAtA[i:], m.SpaceId)
		i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.SpaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodesAddressesBySpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesAddressesBySpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesAddressesBySpaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeAddresses) > 0 {
		for iNdEx := len(m.NodeAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NodeAddresses[iNdEx])
			copy(dAtA[i:], m.NodeAddresses[iNdEx])
			i = encodeVarintNodedebugrpc(dAtA, i, uint64(len(m.NodeAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodedebugrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodedebugrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DumpTreeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpaceId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	l = len(m.DocumentId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	return n
}

func (m *DumpTreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dump)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	return n
}

func (m *AllTreesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpaceId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	return n
}

func (m *Tree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	if len(m.Heads) > 0 {
		for _, s := range m.Heads {
			l = len(s)
			n += 1 + l + sovNodedebugrpc(uint64(l))
		}
	}
	return n
}

func (m *AllTreesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Trees) > 0 {
		for _, e := range m.Trees {
			l = e.Size()
			n += 1 + l + sovNodedebugrpc(uint64(l))
		}
	}
	return n
}

func (m *AllSpacesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllSpacesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpaceIds) > 0 {
		for _, s := range m.SpaceIds {
			l = len(s)
			n += 1 + l + sovNodedebugrpc(uint64(l))
		}
	}
	return n
}

func (m *TreeParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpaceId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	l = len(m.DocumentId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	return n
}

func (m *TreeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	if len(m.HeadIds) > 0 {
		for _, s := range m.HeadIds {
			l = len(s)
			n += 1 + l + sovNodedebugrpc(uint64(l))
		}
	}
	return n
}

func (m *ForceNodeSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ForceNodeSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NodesAddressesBySpaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpaceId)
	if l > 0 {
		n += 1 + l + sovNodedebugrpc(uint64(l))
	}
	return n
}

func (m *NodesAddressesBySpaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAddresses) > 0 {
		for _, s := range m.NodeAddresses {
			l = len(s)
			n += 1 + l + sovNodedebugrpc(uint64(l))
		}
	}
	return n
}

func sovNodedebugrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodedebugrpc(x uint64) (n int) {
	return sovNodedebugrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DumpTreeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DumpTreeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DumpTreeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DumpTreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DumpTreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DumpTreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dump", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dump = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTreesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTreesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTreesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heads = append(m.Heads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllTreesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllTreesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllTreesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trees = append(m.Trees, &Tree{})
			if err := m.Trees[len(m.Trees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllSpacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllSpacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllSpacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllSpacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllSpacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllSpacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceIds = append(m.SpaceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadIds = append(m.HeadIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceNodeSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceNodeSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceNodeSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceNodeSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceNodeSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceNodeSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesAddressesBySpaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesAddressesBySpaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesAddressesBySpaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesAddressesBySpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesAddressesBySpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesAddressesBySpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddresses = append(m.NodeAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodedebugrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodedebugrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodedebugrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodedebugrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodedebugrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodedebugrpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodedebugrpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodedebugrpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodedebugrpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodedebugrpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodedebugrpc = fmt.Errorf("proto: unexpected end of group")
)
